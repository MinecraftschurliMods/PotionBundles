//file:noinspection GroovyAssignabilityCheck
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: "${project.librarian_version}"
    }
}

plugins {
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
//--------------

group = "${project.mod_group}"
version = "${project.mc_version}-${project.mod_version}"
archivesBaseName = "${project.mod_id}"

if (System.getenv('RELEASE_TYPE') != null) {
    status = System.getenv('RELEASE_TYPE').toLowerCase()
    if (status == 'snapshot') status = status.toUpperCase()
} else {
    status = 'SNAPSHOT'
}

if (status != 'release') {
    version = "${version}-${status}"
}

java {
    withSourcesJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_version)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/generated'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'blamejared Maven'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.k-4u.nl'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-1.19.3-common-api:${project.jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-1.19.3-forge:${project.jei_version}")
    implementation 'org.jetbrains:annotations:23.0.0'
}

minecraft {
    mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                potionbundles {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                potionbundles {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${project.mod_id}", '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')
            mods {
                potionbundles {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    //noinspection GroovyAccessibility
    Map<String, ?> buildProps = project.properties.clone()
    buildProps.values().removeIf { !it.getClass().isPrimitive() && !(it instanceof CharSequence) }
    inputs.properties buildProps

    filesMatching(['META-INF/mods.toml']) {
        expand buildProps
    }
    // minify json files
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
        }
    }
}

jar {
    from sourceSets.main.output
    finalizedBy('reobfJar')
}

sourcesJar {
    from sourceSets.main.allSource
}

tasks.withType(Jar).configureEach {
    String extension = ''
    if (it.archiveClassifier.present) {
        extension = it.archiveClassifier.get()
        if (extension != '') {
            extension = '-' + extension
        }
    }
    manifest {
        attributes([
                'Maven-Artifact': "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                'Specification-Title': archivesBaseName,
                'Specification-Vendor': "${project.vendor}",
                'Specification-Version': '1',
                'Implementation-Title': "${archivesBaseName}${extension}",
                'Implementation-Version': "${project.mod_version}",
                'Implementation-Vendor': "${project.vendor}",
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}",
                'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLModType': 'MOD'
        ])
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

reobf {
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

tasks.register('reobf') {
    dependsOn reobfJar
}

tasks.register('setupGithubActions') {
    doLast {
        println "##[set-output name=modid;]${project.mod_id}"
        println "##[set-output name=version;]${project.version}"
    }
}

idea {
    module {
        for (String exclude in ['run', 'out', 'libs']) {
            excludeDirs += file(exclude)
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

publishing {
    publications.create(project.archivesBaseName+'ToMaven', MavenPublication) {
        groupId = project.group
        artifactId = project.archivesBaseName
        version = project.version
        from components.java
        pom {
            name = project.mod_name
            url = project.mod_url
            packaging = 'jar'
            scm {
                connection = "scm:git:git://github.com/${project.github}.git"
                developerConnection = "scm:git:git@github.com:${project.github}.git"
                url = "https://github.com/${project.github}"
            }
            issueManagement {
                system = 'github'
                url = "https://github.com/${project.github}/issues"
            }
            organization {
                name = 'Minecraftschurli Mods'
                url = 'https://github.com/MinecraftschurliMods'
            }
            developers {
                developer {
                    id = 'minecraftschurli'
                    name = 'Minecraftschurli'
                    url = 'https://github.com/Minecraftschurli'
                    email = 'minecraftschurli@gmail.com'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/MinecraftschurliMods'
                    timezone = 'Europe/Vienna'
                }
                developer {
                    id = 'ichhabehunger54'
                    name = 'IchHabeHunger54'
                    url = 'https://github.com/IchHabeHunger54'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/MinecraftschurliMods'
                    timezone = 'Europe/Vienna'
                }
            }
            withXml {
                asNode().dependencies.dependency.each { dep ->
                    if(dep.version.last().value().last().contains('_mapped_')) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (
            (System.getenv("MAVEN_USER") != null) &&
                    (System.getenv("MAVEN_PASSWORD") != null) &&
                    (System.getenv("MAVEN_URL") != null)
            ) {
                url System.getenv("MAVEN_URL")
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            } else {
                url "$buildDir/repo"
            }
        }
    }
}
